
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author beccuti
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        String  WindowWidth= getPreferences().get("DiaseqGUI_WindowWidth", null);
        String  WindowHeight= getPreferences().get("DiaseqGUI_WindowHeight", null); 
        if ((WindowWidth!=null)&&(WindowHeight!=null)){
          setSize(Integer.valueOf(WindowWidth),Integer.valueOf(WindowHeight));  
        }
        else{
            setSize(screenSize.width*95/100,screenSize.height*95/100);
        }
        
        
        
        
       String VerSplPan = getPreferences().get("DiaseqGUI_VerticalSplitPanel", null);
        if (VerSplPan!=null){
            VerticalSplitPanel.setDividerLocation(Integer.valueOf(VerSplPan));
        }
        else {
        VerticalSplitPanel.setDividerLocation(screenSize.height*55/100);
        }
        
        String  WindowConfWidth= getPreferences().get("DiaseqGUI_WindowConfWidth", null);
        String  WindowConfHeight= getPreferences().get("DiaseqGUI_WindowConfHeight", null); 
        if ((WindowConfWidth!=null)&&(WindowConfHeight!=null)){
          OConfigurationFrame.setSize(Integer.valueOf(WindowConfWidth),Integer.valueOf(WindowConfHeight));  
        }
        else{
          OConfigurationFrame.setSize(screenSize.width*60/100,screenSize.height*25/100);
        } 
        
        //OUTPUT FRAME
        int OutputframeWidth= Integer.valueOf(getPreferences().get("DiaseqGUI_WindowOutputWidth", "0"));
        int OutputframeHeight= Integer.valueOf(getPreferences().get("DiaseqGUI_WindowOutputHeight", "0"));
        
        if ((OutputframeWidth==0)||(OutputframeHeight==0)){
              OutputframeWidth=screenSize.width*4/100;
              OutputframeHeight=screenSize.height*5/100;
        }

        OutputFrame.setSize(OutputframeWidth,OutputframeHeight);

        
        setLocationRelativeTo(null); 
        
        invalidate();
        doLayout();
        
    //    DesktopMain.remove(DataForm);
    //    DataForm.repaint();
    //    DesktopMain.add(DataForm);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        OConfigurationFrame = new javax.swing.JFrame();
        jLabel5 = new javax.swing.JLabel();
        OScratchTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        OThreadTextField = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        OParallelTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        OutputFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputText = new javax.swing.JTextArea();
        ReloadOutput = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        VerticalSplitPanel = new javax.swing.JSplitPane();
        DataTabbedPanel = new javax.swing.JTabbedPane();
        SMN1ScrollPane1 = new javax.swing.JScrollPane();
        SMN1analisys = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        SOperatorID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        SInputFolder = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        ProcessScrollPane1 = new javax.swing.JScrollPane();
        ProcList = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        OConfigurationFrame.setTitle("General options");
        OConfigurationFrame.getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/options.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jLabel5, gridBagConstraints);

        OScratchTextField.setEditable(false);
        OScratchTextField.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        OScratchTextField.setToolTipText("It contains the path of the scatch folder");
        OScratchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OScratchTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(OScratchTextField, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel6.setText("Scratch Folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jLabel6, gridBagConstraints);

        jButton11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/86.png"))); // NOI18N
        jButton11.setText("Save & Close");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jButton11, gridBagConstraints);

        jButton12.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        jButton12.setText("Close ");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jButton12, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setText("Threads for analysis:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jLabel7, gridBagConstraints);

        OThreadTextField.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        OThreadTextField.setToolTipText("maimum number of threads for analysis");
        OThreadTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OThreadTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(OThreadTextField, gridBagConstraints);

        jButton13.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/52.png"))); // NOI18N
        jButton13.setText("Browes");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jButton13, gridBagConstraints);

        jButton14.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/33.png"))); // NOI18N
        jButton14.setText("Cancel");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jButton14, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel8.setText("Number of Parallel analyses:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(jLabel8, gridBagConstraints);

        OParallelTextField.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        OParallelTextField.setToolTipText("Maximum number of parallel analysis");
        OParallelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OParallelTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OConfigurationFrame.getContentPane().add(OParallelTextField, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        OConfigurationFrame.getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        OutputFrame.setTitle("Analysis output");
        OutputFrame.getContentPane().setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        OutputText.setColumns(20);
        OutputText.setRows(5);
        jScrollPane1.setViewportView(OutputText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.ipady = 78;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OutputFrame.getContentPane().add(jScrollPane1, gridBagConstraints);

        ReloadOutput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        ReloadOutput.setText("Reload");
        ReloadOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReloadOutputActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OutputFrame.getContentPane().add(ReloadOutput, gridBagConstraints);

        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.png"))); // NOI18N
        jButton16.setText("Remove Entry");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OutputFrame.getContentPane().add(jButton16, gridBagConstraints);

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/33.png"))); // NOI18N
        jButton17.setText("Close");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        OutputFrame.getContentPane().add(jButton17, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DiaseqGUI");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setBackground(new java.awt.Color(237, 237, 237));
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/86.png"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/52.png"))); // NOI18N
        jButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/download.png"))); // NOI18N
        jButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 5));
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton3);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/docker.png"))); // NOI18N
        jButton5.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 5));
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preference.png"))); // NOI18N
        jButton4.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 5));
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        VerticalSplitPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        VerticalSplitPanel.setDividerSize(5);
        VerticalSplitPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        DataTabbedPanel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        SMN1ScrollPane1.setBorder(null);

        SMN1analisys.setLayout(new java.awt.GridBagLayout());

        jButton6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exec.png"))); // NOI18N
        jButton6.setText("Execute");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SMN1analisys.add(jButton6, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(222, 237, 248));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SMM1 Analisys", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(42, 91, 189))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Sample Folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Operator ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        jPanel2.add(jLabel2, gridBagConstraints);

        SOperatorID.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        jPanel2.add(SOperatorID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        jPanel2.add(jLabel3, gridBagConstraints);

        SInputFolder.setEditable(false);
        SInputFolder.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 10);
        jPanel2.add(SInputFolder, gridBagConstraints);

        jButton7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/52.png"))); // NOI18N
        jButton7.setText("Browse");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(jButton7, gridBagConstraints);

        jButton8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/33.png"))); // NOI18N
        jButton8.setText("Cancel");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(jButton8, gridBagConstraints);

        jLabel4.setBackground(new java.awt.Color(222, 237, 248));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(222, 237, 248));
        jLabel4.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        jPanel2.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SMN1analisys.add(jPanel2, gridBagConstraints);

        jButton9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/86b.png"))); // NOI18N
        jButton9.setText(" Save conf.");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SMN1analisys.add(jButton9, gridBagConstraints);

        jButton10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        jButton10.setText("Reset");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SMN1analisys.add(jButton10, gridBagConstraints);

        SMN1ScrollPane1.setViewportView(SMN1analisys);

        DataTabbedPanel.addTab("SMN1 Analisys", new javax.swing.ImageIcon(getClass().getResource("/images/tabIcon5.png")), SMN1ScrollPane1); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 69, Short.MAX_VALUE)
        );

        DataTabbedPanel.addTab("XXY analisys", new javax.swing.ImageIcon(getClass().getResource("/images/tabIcon6.png")), jPanel3); // NOI18N

        VerticalSplitPanel.setLeftComponent(DataTabbedPanel);

        ProcessScrollPane1.setBorder(null);

        ProcList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Process status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 16), new java.awt.Color(0, 51, 204))); // NOI18N
        ProcList.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        ProcList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ProcList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ProcListValueChanged(evt);
            }
        });
        ProcessScrollPane1.setViewportView(ProcList);

        VerticalSplitPanel.setRightComponent(ProcessScrollPane1);

        getContentPane().add(VerticalSplitPanel, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preference.png"))); // NOI18N
        jMenuItem2.setText("Global options");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/docker.png"))); // NOI18N
        jMenuItem1.setText("Remove Docker Containers ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("?");
        jMenu3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        getPreferences().put("DiaseqGUI_WindowWidth", Integer.toString(getSize().width));
        getPreferences().put("DiaseqGUI_WindowHeight",Integer.toString(getSize().height));
        getPreferences().put("DiaseqGUI_VerticalSplitPanel", Integer.toString(VerticalSplitPanel.getDividerLocation()));
    }//GEN-LAST:event_formWindowClosing

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        SInputFolder.setText("");
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
                                            
        JFileChooser openDir = new JFileChooser();
        if (!(SInputFolder.getText().equals(""))){
            File file =new File(SInputFolder.getText());
            if (file.isDirectory())
                openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = getPreferences().get("DiaseqGUI_open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);   
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
             SInputFolder.setText(String.valueOf(f));
        }
        getPreferences().put("DiaseqGUI_open-dir",openDir.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
    
        SInputFolder.setText("");
        SOperatorID.setText("");
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      if (GS.getScratchFolder().equals("")){
          JOptionPane.showMessageDialog(this, "Error: Scratch folder must be specified","Error",JOptionPane.ERROR_MESSAGE);
          OConfigurationFrame.setLocationRelativeTo(null);   
          OConfigurationFrame.setVisible(true);
          OParallelTextField.setText(Integer.toString(GS.getMaxSizelistProcRunning()));
          OThreadTextField.setText(Integer.toString(GS.getDefaultThread()));
          OScratchTextField.setText(GS.getScratchFolder());
      }
     else
          if (SOperatorID.getText().equals("")){
               JOptionPane.showMessageDialog(this, "Error: Operator ID must be specified","Error",JOptionPane.ERROR_MESSAGE);
          }
          else
              if (SInputFolder.getText().equals("")){
                  JOptionPane.showMessageDialog(this, "Error: Input folder must be specified","Error",JOptionPane.ERROR_MESSAGE);
              }
              else{
                   Runtime rt = Runtime.getRuntime();
                   try{
                        String[] cmd = {"/bin/bash","-c"," bash ./execSMM1.sh "};
                        cmd[2]+= "group=\\\"docker\\\""+" scratch.folder=\\\""+GS.getScratchFolder()+"\\\" data.folder=\\\""+SInputFolder.getText();
                        cmd[2]+= " threads="+GS.getDefaultThread()+" "+SInputFolder.getText()+" >& "+SInputFolder.getText()+"/outputExecution ";
                        if (listProcRunning.size()<GS.getMaxSizelistProcRunning()){
                            Process pr = rt.exec(cmd); 
                            System.out.println("Runing PID:"+ getPidOfProcess(pr)+"\n");
                            ElProcRunning tmp= new ElProcRunning("SMM1 analysis ", SInputFolder.getText(),SOperatorID.getText(),pr,listModel.getSize());
                            listProcRunning.add(tmp);
                            java.net.URL imgURL = getClass().getResource("/images/running.png");
                            ImageIcon image2 = new ImageIcon(imgURL);
                            GL.setAvoidProcListValueChanged(-1);
                            listModel.addElement(new ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                            GL.setAvoidProcListValueChanged(0);
                            if(listProcRunning.size()==1){
                                t=new Timer();
                                t.scheduleAtFixedRate(new MyTask(), 5000, 5000);
                            }
                        }                
                        else{
                            ElProcWaiting tmp= new ElProcWaiting("SMM1 analysis ",SInputFolder.getText(),SOperatorID.getText(),cmd,listModel.getSize());
                            listProcWaiting.add(tmp);
                            java.net.URL imgURL = getClass().getResource("/images/waiting.png");
                            ImageIcon image2 = new ImageIcon(imgURL);
                            GL.setAvoidProcListValueChanged(-1);
                            listModel.addElement(new ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                            GL.setAvoidProcListValueChanged(0);
                            }  
                        GL.setAvoidProcListValueChanged(-1);
                        ProcList.setModel(listModel);
                        ProcList.setCellRenderer(new ListEntryCellRenderer()); 
                        GL.setAvoidProcListValueChanged(0);
                   }
                   catch(Exception e) {
                        JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
                        System.out.println(e.toString());
                    }
                   JOptionPane.showMessageDialog(this, "SMM1 analysis task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);
 
              }
              
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         configurationMenuItemActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void OScratchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OScratchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OScratchTextFieldActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        GS.setMaxSizelistProcRunning(Integer.valueOf(OParallelTextField.getText()));
        GS.setScratchFolder(OScratchTextField.getText());
        GS.setDefaultThread(Integer.valueOf(OThreadTextField.getText()));
        GS.save();
        OConfigurationFrame.setVisible(false);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
   OConfigurationFrame.setVisible(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void OThreadTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OThreadTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OThreadTextFieldActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(OScratchTextField.getText().equals(""))){
            File file =new File(OScratchTextField.getText());
            if (file.isDirectory())
                openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = getPreferences().get("DiaseqGUI_open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);   
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
             OScratchTextField.setText(String.valueOf(f));
        }
        OConfigurationFrame.toFront();
        getPreferences().put("DiaseqGUI_open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
     OScratchTextField.setText("");
    }//GEN-LAST:event_jButton14ActionPerformed

    private void OParallelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OParallelTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OParallelTextFieldActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       removeDockerContainer(evt);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       removeDockerContainer(evt);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        configurationMenuItemActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        formWindowClosing(null);    
        setVisible(false);
        dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
    OutputFrame.setVisible(false);        // TODO add your handling code here:
    OutputText.setText("");
    OutputText.setEnabled(true);
    GL.setAvoidProcListValueChanged(-1);
    //GL.setListProcStatuSelection(-1);  
    ProcList.clearSelection();
    GL.setAvoidProcListValueChanged(0);
    getPreferences().put("DiaseqGUI_WindowOutputWidth", Integer.toString(OutputFrame.getWidth()));
    getPreferences().put("DiaseqGUI_WindowOutputHeight", Integer.toString(OutputFrame.getHeight())); 
    outputTime.cancel();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void ProcListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ProcListValueChanged
          
        if (!evt.getValueIsAdjusting()){
            
        //System.out.println("****Open ProcListValueChanged : \n"+GL.getAvoidProcListValueChanged()+" "+GL.getListProcStatuSelection()+" "+evt.getLastIndex());
        if ((GL.getAvoidProcListValueChanged()==-1)){
           // GL.setAvoidProcListValueChanged(0);
            return;
        }
        //if (evt.getLastIndex()<0 ||evt.getLastIndex()>=listModel.getSize()){
        //    return;
        //}
  
        if ((evt!=null)){
        OutputFrame.pack();

         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int OutputframeWidth= Integer.valueOf(getPreferences().get("DiaseqGUI_WindowOutputWidth", "0"));
        int OutputframeHeight= Integer.valueOf(getPreferences().get("DiaseqGUI_WindowOutputHeight", "0")); 
        if ((OutputframeWidth==0)||(OutputframeHeight==0)){
              OutputframeWidth=screenSize.width*4/100;
              OutputframeHeight=screenSize.height*5/100;
        }

        OutputFrame.setSize(OutputframeWidth,OutputframeHeight);
//automatically update file
        outputTime=new Timer();
        outputTime.scheduleAtFixedRate(new MyFileUpdate(), 5000, 5000);
        
        OutputFrame.setLocationRelativeTo(null);   
        OutputFrame.setVisible(true);
        OutputFrame.setAlwaysOnTop(true);
        //System.out.println("QUII->-Inizio\n"+listModel.getSize()+" "+evt.getLastIndex()+"\n"+evt.getSource());
        ListEntry tmpListEntry;
        if ((evt.getLastIndex()!=GL.getListProcStatuSelection()&& (evt.getLastIndex()>=0 && evt.getLastIndex()<listModel.getSize())) ){
                tmpListEntry=  listModel.get(evt.getLastIndex());
                GL.setListProcStatuSelection(evt.getLastIndex());
                
                   //System.out.println("\t------- Selected Last\n");
        }
        else    {
                if (evt.getFirstIndex()>=0 && evt.getFirstIndex()<listModel.getSize()){
                tmpListEntry=  listModel.get(evt.getFirstIndex());
                 //System.out.println("\t------- Selected First\n");
                GL.setListProcStatuSelection(evt.getFirstIndex());
                }
                else
                    return;
        }
        
        if (tmpListEntry.status.equals("Running") || tmpListEntry.status.equals("Finished")){ 
            //System.out.println("\tQUII->-RUNNING\n");
            String text="";
            OutputText.setEnabled(true);
            try{
                File file = new File( tmpListEntry.path+"/Routput.Rout");
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String strLine;
                //Read File Line By Line
                while ((strLine = reader.readLine()) != null)   {
                    text+="\n"+strLine;
                }
                reader.close();    
            }
            catch (Exception e){//Catch exception if any
                //System.err.println("Error: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error reading R output file","Error",JOptionPane.ERROR_MESSAGE);
            }
            OutputText.setText(text);
            if (tmpListEntry.status.equals("Finished"))
            {
                try{
                    File file = new File( tmpListEntry.path+"/dockerID");
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String strLine;
                    //Read File Line By Line
                    while ((strLine = reader.readLine()) != null)   {
                    text+="\n"+strLine;
                    }
                    reader.close();
                 //   DlogButton.setEnabled(true);
                }
                catch (Exception e){//Catch exception if any
                    System.err.println("Error: " + e.getMessage());
                    //JOptionPane.showMessageDialog(this, "Error reading R output file","Error",JOptionPane.ERROR_MESSAGE);
                }      
            }
        }
        else
        {
          OutputText.setEnabled(false);  
          //System.out.println("\tQUIFINE WAITING\n");
        }
        //System.out.println("QUIFINE\n");
        //GL.setListProcStatuSelection(evt.getLastIndex());
        //System.out.println("End ProcListValueChanged\n");
        }
        }
    }//GEN-LAST:event_ProcListValueChanged

    private void ReloadOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReloadOutputActionPerformed
        ListEntry tmpListEntry =  listModel.get(GL.getListProcStatuSelection());
        //
        if (tmpListEntry.status.equals("Running") || tmpListEntry.status.equals("Finished")){
             OutputText.setEnabled(true);
            String text="";
            try{
                File file = new File( tmpListEntry.path+"/Routput.Rout");
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String strLine;
                //Read File Line By Line
                while ((strLine = reader.readLine()) != null)   {
                    text+="\n"+strLine;
                }
                reader.close();    
            }
            catch (Exception e){//Catch exception if any
                System.err.println("Error: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error reading file","Error",JOptionPane.ERROR_MESSAGE);
                
            }
            OutputText.setText(text);
        }
        ReloadOutput.setSelected(false);
    }//GEN-LAST:event_ReloadOutputActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
     int pos=GL.getListProcStatuSelection();
        //System.out.println("Pos:"+pos+"\n");
        int tmpPos=-1;
        for(int i=0;i<listProcRunning.size();i++){
           
            if (listProcRunning.get(i).pos>pos){
                listProcRunning.get(i).pos--;
            }
            else
                if (listProcRunning.get(i).pos==pos){
                    tmpPos=i;
                }
        }
        if (tmpPos!=-1){
            //try{
            //if Docker is runnning
            String[] cmd = {"/bin/bash","-c"," "};
            try{
                    File file = new File(listProcRunning.get(tmpPos).path+"/dockerID");
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String dockerID = reader.readLine();
                    cmd[2]="docker kill " +dockerID +" ; rm " + listProcRunning.get(tmpPos).path+"/dockerID"; 
                    Runtime.getRuntime().exec(cmd);
                    reader.close();    
                }
            catch (IOException e){//Catch exception if any
                System.out.println("No docker running \n");
                } 
            long pID=getPidOfProcess(listProcRunning.get(tmpPos).pr);
            //System.out.println("lanciato PID:"+pID +"\n");  
            if (pID!=-1){
                try{
                   cmd[2]="kill $(./list_descendants.sh " +Long.toString(pID)+")"; 
                   Runtime.getRuntime().exec(cmd);
                }
                catch(IOException e){
                    System.err.println("Error in Killing the process children:" + e);
                }
                
            }
            try{
                    File file = new File(listProcRunning.get(tmpPos).path+"/tempFolderID");
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String tempFolderID = reader.readLine();
                    if (!(tempFolderID.equals(""))){
                        cmd[2]="rm -R " + tempFolderID +" ; rm " + listProcRunning.get(tmpPos).path+"/tempFolderID"; 
                        Runtime.getRuntime().exec(cmd);
                    }
                    reader.close();    
                }    
            catch (IOException e){//Catch exception if any
                System.out.println("No temporary folder\n");
                } 
            listProcRunning.remove(tmpPos);
            tmpPos=-1;
        }
        
        for(int i=0;i<listProcWaiting.size();i++){
            if (listProcWaiting.get(i).pos>pos){
                listProcWaiting.get(i).pos--;    
            }
            else
                if (listProcWaiting.get(i).pos==pos){
                    tmpPos=i;
                } 
        }
         if (tmpPos!=-1){
            listProcWaiting.remove(tmpPos);
            tmpPos=-1;
        }
        //System.out.println("Pos1:"+pos+"\n");
        GL.setListProcStatuSelection(-1);
        listModel.remove(pos);
        //System.out.println("Pos2:"+pos+"\n");
        OutputFrame.setVisible(false);
        OutputText.setText("");
        GL.setAvoidProcListValueChanged(-1);
        ProcList.clearSelection();
        GL.setAvoidProcListValueChanged(0);
    }//GEN-LAST:event_jButton16ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        //Anti-aliasing code
        System.setProperty("awt.useSystemAAFontSettings","on");
        System.setProperty("swing.aatext", "true");
         //Anti-aliasing code
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
             javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());     
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane DataTabbedPanel;
    private javax.swing.JFrame OConfigurationFrame;
    private javax.swing.JTextField OParallelTextField;
    private javax.swing.JTextField OScratchTextField;
    private javax.swing.JTextField OThreadTextField;
    private javax.swing.JFrame OutputFrame;
    private javax.swing.JTextArea OutputText;
    private javax.swing.JList<ListEntry> ProcList;
    private javax.swing.JScrollPane ProcessScrollPane1;
    private javax.swing.JButton ReloadOutput;
    private javax.swing.JTextField SInputFolder;
    private javax.swing.JScrollPane SMN1ScrollPane1;
    private javax.swing.JPanel SMN1analisys;
    private javax.swing.JTextField SOperatorID;
    private javax.swing.JSplitPane VerticalSplitPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    
    
    
    static String prefRootNode = "/org/unito/DiaseqGUI";
       // Preferences
    public static Preferences getPreferences() {
        assert prefRootNode != null;
        Preferences root = Preferences.userRoot();
        return root.node(prefRootNode);
    } 
    
    
    
    private void configurationMenuItemActionPerformed(java.awt.event.ActionEvent evt){
        //ConfigurationFrame.pack();
        OConfigurationFrame.setLocationRelativeTo(null);   
        OConfigurationFrame.setVisible(true);
        OParallelTextField.setText(Integer.toString(GS.getMaxSizelistProcRunning()));
        OThreadTextField.setText(Integer.toString(GS.getDefaultThread()));
        OScratchTextField.setText(GS.getScratchFolder());
        // Adapter3TextField.setText(GS.getDefaultAdapter3());  
    }
   
    
    
    class GlobalSetting{
    private int DefaultThread= 8;
    private int MaxSizelistProcRunning=1;
    private String ScratchFolder="";

 
    public GlobalSetting(){
    boolean findFile=false;    
    try{
                File file = new File(".DiaseqGUI");
                BufferedReader reader = new BufferedReader(new FileReader(file));
                int line=0;
                //Read File Line By Line
                 for (String x = reader.readLine(); x != null; x = reader.readLine()){
                                switch (line){
                                    case 0:
                                        DefaultThread=Integer.valueOf(x);
                                        if (DefaultThread<=0){ 
                                            throw(new NumberFormatException()); 
                                        }
                                    break;
                                    case 1:
                                       MaxSizelistProcRunning=Integer.valueOf(x);
                                        if (MaxSizelistProcRunning<=0){ 
                                            throw(new NumberFormatException()); 
                                        }
                                    break;
                                    case 2:
                                        ScratchFolder=x;
                                    break;  
                                    default:
                                        throw(new NumberFormatException()); 
                                }                                
                                line++;
                            }
                reader.close();    
        }
    catch (Exception e){//Catch exception if any
                //System.err.println("Error: " + e.getMessage());
            return;
            }    
    }
    
    public void save(){
        
        try{
            FileWriter fw = new FileWriter(".DiaseqGUI");
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(DefaultThread+"\n");
            bw.write(MaxSizelistProcRunning+"\n"); 
            bw.write(ScratchFolder+"\n");
            bw.close();    
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(OConfigurationFrame, "Error saving file","Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    int getDefaultThread(){
    return DefaultThread;
    }
        
    String getScratchFolder(){
    return ScratchFolder;
    }
    
    int getMaxSizelistProcRunning(){
    return MaxSizelistProcRunning;
    }
    
    
    void  setDefaultThread(int DefaultThread){
    this.DefaultThread=DefaultThread;
    }
    
    void setScratchFolder(String ScratchFolder){
    this.ScratchFolder=ScratchFolder;
    }
    
    
    void setMaxSizelistProcRunning(int MaxSizelistProcRunning){
    this.MaxSizelistProcRunning=MaxSizelistProcRunning;
    }
}       
       
class GlobalStatus{
    private int ListProcStatusSelection;
    private int AvoidProcListValueChanged; //-1 avoid  ProcListValueChanged
    public GlobalStatus(){
        ListProcStatusSelection=-1;
        AvoidProcListValueChanged=0;
    }
 
    public int getListProcStatuSelection(){
        return ListProcStatusSelection;
    }
    public void setListProcStatuSelection(int ListProcStatusSelection){
     //System.out.print("Updating..."+ListProcStatusSelection+"\n");
        this.ListProcStatusSelection=ListProcStatusSelection;
    }
 
    public int getAvoidProcListValueChanged(){
        return AvoidProcListValueChanged;
    }
    public void setAvoidProcListValueChanged(int AvoidProcListValueChanged){
        this.AvoidProcListValueChanged=AvoidProcListValueChanged;
    }
}

    GlobalSetting GS =new GlobalSetting();
    GlobalStatus GL =new GlobalStatus();
    
    
      
     private void  removeDockerContainer(java.awt.event.ActionEvent evt){
        
        String[] cmd = {"/bin/bash","-c"," docker rm $(docker ps -q -f status=exited); docker rm $(docker ps -q -f status=dead)"}; 
        try{
            Runtime.getRuntime().exec(cmd);
            JOptionPane.showMessageDialog(this, "All docker containers were removed!!","Confermation",JOptionPane.INFORMATION_MESSAGE);
            }
        catch (IOException e){
            System.out.println("Docker containers were not removed\n");
        } 
     } 
    
     
     
    
public class ElProcRunning {
    public String type;
    public String path;
    public String id;
    public Process pr;
    public int  pos;
    //constructor
    public ElProcRunning(String type,String path, String id, Process pr,int i) {
        this.type = type;
        this.path = path;
        this.pr = pr;
        this.id=id;
        pos=i;
    }
   public String toString() {
       return new String(type+" ( data: "+path+" --- Operator ID: "+ id+" )");
   }
}

public class ElProcWaiting {
    public String type;
    public String path;
    public String id;
    public String[] cmd;
    public int  pos;
    //constructor
    public ElProcWaiting(String type, String path,String id, String[] cmd, int i) {
        this.type = type;
        this.path =path;
        this.cmd = cmd;
        this.id=id;
        pos=i;
    }
    public String toString() {
      return new String(type+" ( data: "+path+" --- Operator ID: "+ id+" )");
   }
} 
   

class ListEntry
{
   private String value;
   private ImageIcon icon;
   private  String status;
   private  String path;
   private static final long serialVersionUID = 57782123311L;
   public ListEntry(String value, String status,String path, ImageIcon icon) {
      this.value = value;
      this.icon = icon;
      this.status=status;
      this.path=path;
   }
  
   public String getValue() {
      return value;
   }
  
   public ImageIcon getIcon() {
      return icon;
   }
   public String getStatus() {
      return status;
   }
  
   public String getPath() {
      return path;
   }
   
   public String toString() {
      return value;
   }
}

     
    ArrayList <ElProcRunning> listProcRunning =  new  ArrayList <ElProcRunning> ();
    ArrayList <ElProcWaiting> listProcWaiting = new  ArrayList <ElProcWaiting> ();
    DefaultListModel<ListEntry> listModel= new DefaultListModel <ListEntry> ();
   
    
    public static synchronized long getPidOfProcess(Process p) {
        long pid = -1;

        try {
            if (p.getClass().getName().equals("java.lang.UNIXProcess")) {
                Field f = p.getClass().getDeclaredField("pid");
                f.setAccessible(true);
                pid = f.getLong(p);
                f.setAccessible(false);
            }
        } catch (Exception e) {
            pid = -1;
            }
        return pid;
  }
    
   
    
 class MyTask extends TimerTask {
      
        public void run() {

            //System.out.format("Checking running !%n");
            for (int i=0;i<listProcRunning.size();i++){
                if (listProcRunning.get(i).pr.isAlive()){
                    //System.out.format("TRUE\n");
                }                    
                else
                {
                    //System.out.format("False\n");
                    int index=listProcRunning.get(i).pos;
                    java.net.URL imgURL = getClass().getResource("/images/end.png");
                    ImageIcon image2 = new ImageIcon(imgURL);
                    //listModel.remove(index+1);
                    //GL.setAvoidProcListValueChanged(-1);
                    listModel.set(index,new ListEntry(" [Finished]   " + listProcRunning.get(i).toString(), "Finished",listProcRunning.get(i).path,image2));
                    
                    listProcRunning.remove(i);        
                }
            }
            //System.out.format("End Check!\n");    
            //System.out.format("Checking waiting !%n");
            while ((listProcRunning.size()<GS.getMaxSizelistProcRunning())&&(listProcWaiting.size()>0)){
                try{
                
                    Runtime rt = Runtime.getRuntime();
                    Process pr = rt.exec(listProcWaiting.get(0).cmd);
                    ElProcRunning tmp= new ElProcRunning(listProcWaiting.get(0).type,listProcWaiting.get(0).path,listProcWaiting.get(0).id,pr,listProcWaiting.get(0).pos);
                    listProcRunning.add(tmp);
                    java.net.URL imgURL = getClass().getResource("/images/running.png");
                    ImageIcon image2 = new ImageIcon(imgURL);
                    //listModel.remove(listProcWaiting.get(0).pos);
                    //GL.setAvoidProcListValueChanged(-1);
                    listModel.set(listProcWaiting.get(0).pos,new ListEntry(" [Running]   " +  listProcWaiting.get(0).toString(),"Running", listProcWaiting.get(0).path,image2));
                    listProcWaiting.remove(0);
                    //System.out.format("Size:"+listProcRunning.size()+"\n");
                } 
                catch(Exception e) {
                    JOptionPane.showMessageDialog(ProcList, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
                    System.out.println(e.toString());
                }
            }
            //System.out.format("End Check!\n"); 
            if (listProcRunning.size()==0){
                 //System.out.format("End TimerTask\n");
                 t.cancel();
            }
                
        }
    }   
    
 Timer t,outputTime;
 
 
    class ListEntryCellRenderer
        extends JLabel implements ListCellRenderer<Object> {
    
     private JLabel label;
     private static final long serialVersionUID = 5778212331L;
     public Component getListCellRendererComponent(JList<?> list, Object value,
                                                 int index, boolean isSelected,
                                                 boolean cellHasFocus) {
        ListEntry entry = (ListEntry) value;
  
        setText(value.toString());
        setIcon(entry.getIcon());
   
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        }
        else {
            setBackground(list.getBackground());
             setForeground(list.getForeground());
        }
  
        setEnabled(list.isEnabled());
        setFont(list.getFont());
        setOpaque(true);
  
        return this;
        }
 
    }
    
      class MyFileUpdate extends TimerTask{
       public void run() {
        if (GL.getListProcStatuSelection()>=0){
            ListEntry tmpListEntry =  listModel.get(GL.getListProcStatuSelection());
            //
            if (tmpListEntry.status.equals("Running") || tmpListEntry.status.equals("Finished")){
             OutputText.setEnabled(true);
            String text="";
            try{
                File file = new File( tmpListEntry.path+"/Routput.Rout");
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String strLine;
                //Read File Line By Line
                while ((strLine = reader.readLine()) != null)   {
                    text+="\n"+strLine;
                }
                reader.close();    
            }
            catch (Exception e){//Catch exception if any
                //To avoid to recall infinitelly this error
                outputTime.cancel();
                System.err.println("Error: " + e.getMessage());
                JOptionPane.showMessageDialog(OutputFrame, "Error reading file","Error",JOptionPane.ERROR_MESSAGE);
                }
            OutputText.setText(text);
            }
            ReloadOutput.setSelected(false);   
        }
      }
  }
}


